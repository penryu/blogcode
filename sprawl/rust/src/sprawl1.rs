#![warn(clippy::pedantic)]
#![deny(clippy::all)]

use std::io::{self, Read, Write};

static BYTES: [&[u8]; 256] = [
    b"00000000", b"00000001", b"00000010", b"00000011",
    b"00000100", b"00000101", b"00000110", b"00000111",
    b"00001000", b"00001001", b"00001010", b"00001011",
    b"00001100", b"00001101", b"00001110", b"00001111",
    b"00010000", b"00010001", b"00010010", b"00010011",
    b"00010100", b"00010101", b"00010110", b"00010111",
    b"00011000", b"00011001", b"00011010", b"00011011",
    b"00011100", b"00011101", b"00011110", b"00011111",
    b"00100000", b"00100001", b"00100010", b"00100011",
    b"00100100", b"00100101", b"00100110", b"00100111",
    b"00101000", b"00101001", b"00101010", b"00101011",
    b"00101100", b"00101101", b"00101110", b"00101111",
    b"00110000", b"00110001", b"00110010", b"00110011",
    b"00110100", b"00110101", b"00110110", b"00110111",
    b"00111000", b"00111001", b"00111010", b"00111011",
    b"00111100", b"00111101", b"00111110", b"00111111",
    b"01000000", b"01000001", b"01000010", b"01000011",
    b"01000100", b"01000101", b"01000110", b"01000111",
    b"01001000", b"01001001", b"01001010", b"01001011",
    b"01001100", b"01001101", b"01001110", b"01001111",
    b"01010000", b"01010001", b"01010010", b"01010011",
    b"01010100", b"01010101", b"01010110", b"01010111",
    b"01011000", b"01011001", b"01011010", b"01011011",
    b"01011100", b"01011101", b"01011110", b"01011111",
    b"01100000", b"01100001", b"01100010", b"01100011",
    b"01100100", b"01100101", b"01100110", b"01100111",
    b"01101000", b"01101001", b"01101010", b"01101011",
    b"01101100", b"01101101", b"01101110", b"01101111",
    b"01110000", b"01110001", b"01110010", b"01110011",
    b"01110100", b"01110101", b"01110110", b"01110111",
    b"01111000", b"01111001", b"01111010", b"01111011",
    b"01111100", b"01111101", b"01111110", b"01111111",
    b"10000000", b"10000001", b"10000010", b"10000011",
    b"10000100", b"10000101", b"10000110", b"10000111",
    b"10001000", b"10001001", b"10001010", b"10001011",
    b"10001100", b"10001101", b"10001110", b"10001111",
    b"10010000", b"10010001", b"10010010", b"10010011",
    b"10010100", b"10010101", b"10010110", b"10010111",
    b"10011000", b"10011001", b"10011010", b"10011011",
    b"10011100", b"10011101", b"10011110", b"10011111",
    b"10100000", b"10100001", b"10100010", b"10100011",
    b"10100100", b"10100101", b"10100110", b"10100111",
    b"10101000", b"10101001", b"10101010", b"10101011",
    b"10101100", b"10101101", b"10101110", b"10101111",
    b"10110000", b"10110001", b"10110010", b"10110011",
    b"10110100", b"10110101", b"10110110", b"10110111",
    b"10111000", b"10111001", b"10111010", b"10111011",
    b"10111100", b"10111101", b"10111110", b"10111111",
    b"11000000", b"11000001", b"11000010", b"11000011",
    b"11000100", b"11000101", b"11000110", b"11000111",
    b"11001000", b"11001001", b"11001010", b"11001011",
    b"11001100", b"11001101", b"11001110", b"11001111",
    b"11010000", b"11010001", b"11010010", b"11010011",
    b"11010100", b"11010101", b"11010110", b"11010111",
    b"11011000", b"11011001", b"11011010", b"11011011",
    b"11011100", b"11011101", b"11011110", b"11011111",
    b"11100000", b"11100001", b"11100010", b"11100011",
    b"11100100", b"11100101", b"11100110", b"11100111",
    b"11101000", b"11101001", b"11101010", b"11101011",
    b"11101100", b"11101101", b"11101110", b"11101111",
    b"11110000", b"11110001", b"11110010", b"11110011",
    b"11110100", b"11110101", b"11110110", b"11110111",
    b"11111000", b"11111001", b"11111010", b"11111011",
    b"11111100", b"11111101", b"11111110", b"11111111",
];

fn main() -> io::Result<()> {
    let stdin = io::stdin();
    let mut stdout = io::stdout();

    for c in stdin.bytes().flatten() {
        stdout.write_all(BYTES[c as usize])?;
    }

    Ok(())
}
